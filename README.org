#+TITLE: NEMA - Nayuki's EMAcs config
#+AUTHOR: Nyk Ma <i@nyk.ma>

* What's this?

A not-so-hurt-yet-still-make-kind-of-sense emacs configuration set, c/w a bunch of packages.

* Usage

#+BEGIN_SRC sh
cd ~
mv .emacs.d .emacs.d.old
git clone https://github.com/nykma/nema.git .emacs.d
emacs -nw
#+END_SRC

* Hotkey cheatsheet

| Hotkey        | Command                         | Location          | Comment                                        |
|---------------+---------------------------------+-------------------+------------------------------------------------|
| =C-c g g=     | =magit-status=                  | =nema-vcs.el=     | =git status=                                   |
| =C-c g b=     | =magit-blame=                   | =nema-vcs.el=     | =git blame= current buffer                     |
| =C-c g d=     | =magit-diff-buffer-file=        | =nema-vcs.el=     | =git diff= current buffer                      |
| C-'           | =avy-goto-char-timer=           | =nema-basic.el=   | Cursor jump to location                        |
| =C->=         | =mc/mark-next-like-this-symbol= | =nema-basic.el=   | Multi cursor (find next symbol)                |
| =C-C=         | =mc/edit-lines=                 | =nema-basic.el=   | Multi cursor (add one cursor each line)        |
| =M-o=         | Common window functions         | =nema-hydra.el=   | Focus changing, window creation/deletion, etc. |
| =C-c & w=     | =aya-create=                    | =nema-snippet.el= | Create and use a snippet when editing          |
| =C-M-o=       | =ace-window=                    | =nema-basic.el=   | Powerful window switch                         |
| =C-1= ~ =C-9= | =winum-select-window-1=         | =nema-basic.el=   | Quick window switch                            |
| =C-z=         | =popwin:keymap=                 | =nema-basic.el=   | Popup window (acts like Quickfix in Vim)       |

* Customize
** =customize-group=
   There is a customize group called =nema= to give you a few customization options. Remember to restart emacs
   if anything is changed.
     - =nema-emacs-completion-engine= :: Choose between =ivy=, =helm= and none. Default to =ivy=
     - =nema-use-lsp= :: Use LSP or not. Remember to follow toolchain installation instructions below. Default to =nil=
     - =nema-theme= :: Choose one theme from given pre-defined themes list.
     - =nema-theme-style= :: Switch between dark and light mode of your theme (if supported).
** Besides
 There are many ways to hack this. You can
 1. Write your ELisp in =.emacs.d/my/*.el=. They will be loaded after all =nema-*= modules are loaded.
    - Your YAS snippets will be saved and loaded in =.emacs.d/my/snippets/**/*=. (See =nema-snippet.el=)
    - =.emacs.d/my/**/*= is in =.gitignore= list. So you can save sensitive data
      (e.g. IRC login info or Mail account) or some machine-specific configs (e.g. if you have a HiDPI laptop
      and a workstation with normal DPI displays) without syncing across with VCS.
    - I've written some maybe-useful scripts in =my-sample/*.el=. Symlink (or copy) them into your =my/= folder to
      enable them.
 2. Fork me, then modify the =.emacs.d/nema/*.el= files (since it's yours now).

* LSP server installation
** Java
   Emacs client provided by [[https://github.com/emacs-lsp/lsp-java][emacs-lsp/lsp-java]]

   #+BEGIN_SRC bash
   $ wget http://download.eclipse.org/jdtls/snapshots/jdt-language-server-latest.tar.gz
   $ tar -xf jdt-language-server-latest.tar.gz -C ~/.emacs.d/eclipse.jdt.ls/server/
   #+END_SRC

** PHP
   [[https://github.com/felixfbecker/php-language-server][felixfbecker/php-language-server]]

   #+BEGIN_SRC bash
   $ composer global require felixfbecker/language-server
   $ cd ~/.config/composer # or ~/.composer , depends on your system package setting
   $ composer run-script --working-dir=vendor/felixfbecker/language-server parse-stubs
   #+END_SRC

   #+BEGIN_QUOTE
   If your global composer root dir is not =~/.config/composer= ,
   you may need to set a new path of =lsp-clients-php-server-command=
   #+END_QUOTE

** Ruby
   [[https://www.solargraph.org/][Solargraph]]

   #+BEGIN_SRC bash
   $ gem install solargraph
   #+END_SRC

** JavaScript, TypeScript
   [[https://github.com/sourcegraph/javascript-typescript-langserver][sourcegraph/javascript-typescript-langserver]]

   #+BEGIN_SRC bash
   $ npm i -g javascript-typescript-langserver
   #+END_SRC

** Python
   [[https://github.com/palantir/python-language-server][palantir/python-language-server]]

   #+BEGIN_SRC bash
   $ pip install 'python-language-server[all]'
   #+END_SRC

** Golang
   [[https://github.com/sourcegraph/go-langserver][sourcegraph/go-langserver]]

   #+BEGIN_SRC bash
   $ go get -u github.com/sourcegraph/go-langserver
   #+END_SRC

** Rust
   Use =rustup= to install components

   #+BEGIN_SRC bash
   $ rustup component add rls-preview rust-analysis rust-src
   #+END_SRC

** C / C++ / Obj-C
   =clangd= should be bundled with your =clang= package. To check, use =which clangd= .

** Dart
   [[https://github.com/natebosch/dart_language_server][natebosch/dart_language_server]]
   #+BEGIN_SRC bash
   $ pub global activate dart_language_server
   #+END_SRC

** Elixir
   [[https://github.com/JakeBecker/elixir-ls][JakeBecker/elixir-ls]]

   1. Download [[https://github.com/JakeBecker/elixir-ls/releases][precompiled release]]
   2. Extract it somewhere (e.g. =~/.elixir-ls-server/=)
   3. =chmod 755 ~/.elixir-ls-server/language_server.sh=
   4. In Emacs, =M-x customize-variable lsp-clients-elixir-server-executable=, change it to =~/.elixir-ls-server/language_server.sh= and save.

* Known issues
  1. If it is run at its first time, make sure not to use =emacs --server=, since it may prompt you
     of Elisp-enabled themes. Use =emacs= or =emacs -nw= instead, and press =y= if prompted.
     When =.emacs.d/custom.el= is built, you can use server mode without problem.

* Many thanks to

- [[https://github.com/emacs-tw/emacs-101-beginner-survival-guide][emacs-tw/emacs-101-beginner-survival-guide]] who gave me courage to build my very own config from scratch.
- [[https://github.com/kuanyui/.emacs.d][kuanyui/.emacs.d]] and [[https://github.com/purcell/emacs.d][purcell/emacs.d]] who provided a good project structure for reference.
- [[https://github.com/bbatsov/prelude][bbatsov/prelude]] who gave me ideas of how to do theme reloading properly.

* License
  GPLv3 for
  - Initialization and core files
  - Layer files (=nema-*.el=)
  - =my-sample/*.el=

  See =LICENSE= file
